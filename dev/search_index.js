var documenterSearchIndex = {"docs":
[{"location":"spatial/#Spatial-point-processes","page":"Spatial point processes","title":"Spatial point processes","text":"","category":"section"},{"location":"spatial/","page":"Spatial point processes","title":"Spatial point processes","text":"Partial rejection sampling (PRS) can be applied to generate exact samples from pairwise Gibbs point processes with finite interaction range.","category":"page"},{"location":"spatial/","page":"Spatial point processes","title":"Spatial point processes","text":"For more details on spatial point processes please refer to Jesper. Møller , Rasmus Plenge. Waagepetersen  (2004) and references therein.","category":"page"},{"location":"spatial/","page":"Spatial point processes","title":"Spatial point processes","text":"PRS.AbstractSpatialPointProcess\nPRS.window(::PRS.AbstractSpatialPointProcess)\nPRS.dimension(::PRS.AbstractSpatialPointProcess)","category":"page"},{"location":"spatial/#PartialRejectionSampling.AbstractSpatialPointProcess","page":"Spatial point processes","title":"PartialRejectionSampling.AbstractSpatialPointProcess","text":"AbstractSpatialPointProcess{T<:Vector{Float64}} <: AbstractPointProcess{T}\n\nAbstract type encoding point processes defined on mathbbR^d.\n\nConcrete instances must have a window field of type PRS.AbstractSpatialWindow\n\n\n\n\n\n","category":"type"},{"location":"spatial/#PartialRejectionSampling.window-Tuple{AbstractSpatialPointProcess}","page":"Spatial point processes","title":"PartialRejectionSampling.window","text":"window(pp::AbstractSpatialPointProcess)::AbstractSpatialWindow = pp.window\n\n\n\n\n\n","category":"method"},{"location":"spatial/#PartialRejectionSampling.dimension-Tuple{AbstractSpatialPointProcess}","page":"Spatial point processes","title":"PartialRejectionSampling.dimension","text":"dimension(pp::AbstractSpatialPointProcess) = dimension(window(pp))\n\n\n\n\n\n","category":"method"},{"location":"spatial/#Poisson-point-process","page":"Spatial point processes","title":"Poisson point process","text":"","category":"section"},{"location":"spatial/","page":"Spatial point processes","title":"Spatial point processes","text":"Modules = [PartialRejectionSampling]\nPages   = [\"spatial/poisson.jl\"]\nPrivate = true\nOrder = [:module, :constant, :type, :function, :macro]","category":"page"},{"location":"spatial/#PartialRejectionSampling.HomogeneousPoissonPointProcess","page":"Spatial point processes","title":"PartialRejectionSampling.HomogeneousPoissonPointProcess","text":"HomogeneousPoissonPointProcess{T<:Vector{Float64}} <: AbstractSpatialPointProcess{T}\n\nHomegeneous Poisson point process with intensity beta  0, denoted operatornamePoisson(beta).\n\noperatornamePoisson(beta) has density (w.r.t. the homogenous Poisson point process with unit intensity operatornamePoisson(1)) proportional to\n\n    prod_x in X\n        beta\n\n\n\n\n\n","category":"type"},{"location":"spatial/#PartialRejectionSampling.HomogeneousPoissonPointProcess-2","page":"Spatial point processes","title":"PartialRejectionSampling.HomogeneousPoissonPointProcess","text":"HomogeneousPoissonPointProcess(\n    β::Real,\n    window::Union{Nothin,AbstractSpatialWindow}=nothing\n)\n\nConstruct a PRS.HomogeneousPoissonPointProcess with intensity β restricted to window.\n\nDefault window (window=nothing) is PRS.SquareWindow().\n\nusing PartialRejectionSampling\n\nβ = 40\nwin = PRS.SquareWindow(zeros(2), 1)\nPRS.HomogeneousPoissonPointProcess(β, win)\n\n# output\n\nHomogeneousPoissonPointProcess{Array{Float64,1}}\n- β = 40.0\n- window = SquareWindow [0.0, 1.0]^2\n\n\n\n\n\n","category":"type"},{"location":"spatial/#PartialRejectionSampling.generate_sample-Union{Tuple{HomogeneousPoissonPointProcess{Array{T,1}}}, Tuple{T}} where T<:Float64","page":"Spatial point processes","title":"PartialRejectionSampling.generate_sample","text":"generate_sample(\n    pp::HomogeneousPoissonPointProcess{Vector{T}};\n    win::Union{Nothing,AbstractWindow}=nothing,\n    rng=-1\n)::Matrix{T} where {T<:Float64}\n\nGenerate an exact sample from PRS.HomogeneousPoissonPointProcess on window win. Sampled points are stored as columns of the output matrix.\n\nDefault window (win=nothing) is window(pp).\n\n\n\n\n\n","category":"method"},{"location":"spatial/#PartialRejectionSampling.generate_sample_poisson_union_balls-Tuple{Real,Array{T,2} where T,Real}","page":"Spatial point processes","title":"PartialRejectionSampling.generate_sample_poisson_union_balls","text":"generate_sample_poisson_union_balls(\n    β::Real,\n    centers::Matrix,\n    radius::Real;\n    win::Union{Nothing,AbstractWindow}=nothing,\n    rng=-1\n)::Matrix{Float64}\n\nGenerate an exact sample from a homogenous PRS.HomogeneousPoissonPointProcess Poisson(β) on bigcup_i B(c_i r) (union of balls centered at c_i with the same radius r).\n\nIf win ≂̸ nothing, returns the points falling in win.\n\nhint: Hint\nUse the independence property of the Poisson point process on disjoint subsets in order toSample from Poisson(β) on B(c_1 r),\nSample from Poisson(β) on B(c_2 r) setminus B(c_1 r),\nSample from Poisson(β) on B(c_j r) setminus bigcup_ij B(c_i r),\n...\n\n\n\n\n\n","category":"method"},{"location":"spatial/#PartialRejectionSampling.intensity-Tuple{HomogeneousPoissonPointProcess}","page":"Spatial point processes","title":"PartialRejectionSampling.intensity","text":"intensity(pp::HomogeneousPoissonPointProcess) = pp.β\n\n\n\n\n\n","category":"method"},{"location":"spatial/#Hard-core-point-process","page":"Spatial point processes","title":"Hard core point process","text":"","category":"section"},{"location":"spatial/","page":"Spatial point processes","title":"Spatial point processes","text":"Modules = [PartialRejectionSampling]\nPages   = [\"spatial/hard_core.jl\"]\nPrivate = true\nOrder = [:module, :constant, :type, :function, :macro]","category":"page"},{"location":"spatial/#PartialRejectionSampling.HardCorePointProcess","page":"Spatial point processes","title":"PartialRejectionSampling.HardCorePointProcess","text":"HardCorePointProcess{T<:Vector{Float64}} <: AbstractSpatialPointProcess{T}\n\nSpatial point process with density (w.r.t. the homogenous Poisson point process with unit intensity) proportional to\n\n    prod_x in X\n        beta\n    prod_x y subseteq X\n        1_ left x - y right_2  r \n\nwhere beta  0 is called the background intensity and r  0 the interaction range.\n\nPRS.HardCorePointProcess can be viewed as\n\nPRS.HomogeneousPoissonPointProcess conditioned to having no pair of points at distance less than r,\nPRS.StraussPointProcess with interaction coefficient gamma=0.\n\nSee also\n\nPRS.HardCoreGraph, the graph counterpart of PRS.HardCorePointProcess.\n\nExample\n\nA realization for beta=38 and r=01 on 0 1^2.\n\n(Image: assets/hard_core_spatial.png)\n\n\n\n\n\n","category":"type"},{"location":"spatial/#PartialRejectionSampling.HardCorePointProcess-2","page":"Spatial point processes","title":"PartialRejectionSampling.HardCorePointProcess","text":"HardCorePointProcess(\n    β::Real,\n    r::Real,\n    window::Union{Nothing,AbstractSpatialWindow}=nothing\n)\n\nConstruct a PRS.HardCorePointProcess with intensity β and interaction range r, restricted to window.\n\nDefault window (window=nothing) is PRS.SquareWindow().\n\nusing PartialRejectionSampling\n\nβ, r = 40, 0.05\nwin = PRS.SquareWindow(zeros(2), 1)\nPRS.HardCorePointProcess(β, r, win)\n\n# output\n\nHardCorePointProcess{Array{Float64,1}}\n- β = 40.0\n- r = 0.05\n- window = SquareWindow [0.0, 1.0]^2\n\n\n\n\n\n","category":"type"},{"location":"spatial/#PartialRejectionSampling.generate_sample-Union{Tuple{HardCorePointProcess{T}}, Tuple{T}} where T","page":"Spatial point processes","title":"PartialRejectionSampling.generate_sample","text":"generate_sample(\n    pp::HardCorePointProcess{T}\n    win::Union{Nothing,AbstractWindow}=nothing,\n    rng=-1\n)::Vector{T} where {T}\n\nGenerate an exact sample from the PRS.HardCorePointProcess.\n\nDefault window (win=nothing) is window(pp)=pp.window.\n\nDefault sampler is PRS.generate_sample_prs.\n\nSee also\n\nPRS.generate_sample_dcftp,\nPRS.generate_sample_grid_prs.\n\n\n\n\n\n","category":"method"},{"location":"spatial/#PartialRejectionSampling.generate_sample_prs-Union{Tuple{HardCorePointProcess{T}}, Tuple{T}} where T","page":"Spatial point processes","title":"PartialRejectionSampling.generate_sample_prs","text":"generate_sample_prs(\n    pp::HardCorePointProcess{T}\n    win::Union{Nothing,AbstractWindow}=nothing,\n    rng=-1\n)::Vector{T} where {T}\n\nSample from PRS.HardCorePointProcess using Partial Rejection Sampling (PRS) of Heng Guo , Mark Jerrum  (2018).\n\nDefault window (win=nothing) is window(pp)=pp.window.\n\nSee also\n\nPRS.generate_sample_dcftp\nPRS.generate_sample_grid_prs.\n\nExample\n\nA illustration of the procedure for beta=38 and r=01 on 0 1^2 where points are marked with a circle of radius r2.\n\n(Image: assets/hard_core_spatial_prs.gif)\n\n\n\n\n\n","category":"method"},{"location":"spatial/#PartialRejectionSampling.gibbs_interaction-Union{Tuple{T}, Tuple{HardCorePointProcess{T},PartialRejectionSampling.SpatialCellGridPRS{T},PartialRejectionSampling.SpatialCellGridPRS{T}}} where T","page":"Spatial point processes","title":"PartialRejectionSampling.gibbs_interaction","text":"gibbs_interaction(\n    pp::HardCorePointProcess{T},\n    cell1::SpatialCellGridPRS{T},\n    cell2::SpatialCellGridPRS{T}\n)::Real where {T}\n\nCompute the pairwise Gibbs interaction for a PRS.HardCorePointProcess between C_1=cell1 and C_2=cell2,\n\n    prod_(x y) in C_1 times C_2\n        1_ leftx - yright_2 leq r \n\n\n\n\n\n","category":"method"},{"location":"spatial/#PartialRejectionSampling.intensity-Tuple{HardCorePointProcess}","page":"Spatial point processes","title":"PartialRejectionSampling.intensity","text":"intensity(pp::HardCorePointProcess) = pp.β\n\n\n\n\n\n","category":"method"},{"location":"spatial/#PartialRejectionSampling.interaction_coefficient-Tuple{HardCorePointProcess}","page":"Spatial point processes","title":"PartialRejectionSampling.interaction_coefficient","text":"interaction_coefficient(pp::HardCorePointProcess) = 0.0\n\n\n\n\n\n","category":"method"},{"location":"spatial/#PartialRejectionSampling.interaction_range-Tuple{HardCorePointProcess}","page":"Spatial point processes","title":"PartialRejectionSampling.interaction_range","text":"interaction_range(pp::HardCorePointProcess) = pp.r\n\n\n\n\n\n","category":"method"},{"location":"spatial/#PartialRejectionSampling.isattractive-Tuple{HardCorePointProcess}","page":"Spatial point processes","title":"PartialRejectionSampling.isattractive","text":"isattractive(pp::HardCorePointProcess) = false\n\n\n\n\n\n","category":"method"},{"location":"spatial/#PartialRejectionSampling.isrepulsive-Tuple{HardCorePointProcess}","page":"Spatial point processes","title":"PartialRejectionSampling.isrepulsive","text":"isrepulsive(pp::HardCorePointProcess) = true\n\n\n\n\n\n","category":"method"},{"location":"spatial/#PartialRejectionSampling.papangelou_conditional_intensity-Union{Tuple{T}, Tuple{HardCorePointProcess{Array{T,1}},AbstractArray{T,1},Union{AbstractSet{Array{T,1}}, AbstractArray{Array{T,1},1}}}} where T","page":"Spatial point processes","title":"PartialRejectionSampling.papangelou_conditional_intensity","text":"papangelou_conditional_intensity(\n    pp::HardCorePointProcess{Vector{T}},\n    x::AbstractVector{T},\n    X::Union{AbstractVector{Vector{T}},AbstractSet{Vector{T}}}\n)::Real where {T}\n\nCompute the Papangelou conditional intensity of the point process pp\n\n    beta\n    prod_yin X 1_left x - y right_2  r\n\nwhere beta= pp.β and r= pp.r.\n\n\n\n\n\n","category":"method"},{"location":"spatial/#PartialRejectionSampling.upper_bound_papangelou_conditional_intensity-Tuple{HardCorePointProcess}","page":"Spatial point processes","title":"PartialRejectionSampling.upper_bound_papangelou_conditional_intensity","text":"upper_bound_papangelou_conditional_intensity(pp::HardCorePointProcess) = intensity(pp)\n\n\n\n\n\n","category":"method"},{"location":"spatial/#Strauss-point-process","page":"Spatial point processes","title":"Strauss point process","text":"","category":"section"},{"location":"spatial/","page":"Spatial point processes","title":"Spatial point processes","text":"Modules = [PartialRejectionSampling]\nPages   = [\"spatial/strauss.jl\"]\nPrivate = true\nOrder = [:module, :constant, :type, :function, :macro]","category":"page"},{"location":"spatial/#PartialRejectionSampling.StraussPointProcess","page":"Spatial point processes","title":"PartialRejectionSampling.StraussPointProcess","text":"StraussPointProcess{T<:Vector{Float64}} <: AbstractSpatialPointProcess{T}\n\nSpatial point process with density (w.r.t. the homogenous Poisson point process with unit intensity) given by\n\n    prod_x in X\n        beta\n    prod_x y subseteq X\n        gamma^ 1_ left x - y right_2 leq r  \n    =\n    beta^X\n    gamma^x y subseteq X  left x - y right_2 leq r\n\nwith intensity beta  0, interaction coefficient 0leq gammaleq 1 and interaction range r  0.\n\ngamma = 0 corresponds to the PRS.HardCorePointProcess,\ngamma = 1 corresponds to the PRS.HomogeneousPoissonPointProcess.\n\nSee also\n\nSection 6.2.2 of Jesper. Møller , Rasmus Plenge. Waagepetersen  (2004).\n\n\n\n\n\n","category":"type"},{"location":"spatial/#PartialRejectionSampling.StraussPointProcess-2","page":"Spatial point processes","title":"PartialRejectionSampling.StraussPointProcess","text":"StraussPointProcess(\n    β::Real,\n    γ::Real,\n    r::Real,\n    window::Union{Nothing,AbstractSpatialWindow}=nothing\n)\n\nConstruct a PRS.StraussPointProcess with intensity β, interaction coefficient γ, and interaction range r, restricted to window.\n\nDefault window (window=nothing) is PRS.SquareWindow().\n\nusing PartialRejectionSampling\n\nβ, γ, r = 2.0, 0.2, 0.7\nwin = PRS.SquareWindow([0.0, 0.0], 10.0)\nPRS.StraussPointProcess(β, γ, r, win)\n\n# output\n\nStraussPointProcess{Array{Float64,1}}\n- β = 2.0\n- γ = 0.2\n- r = 0.7\n- window = SquareWindow [0.0, 10.0]^2\n\nExample\n\nA illustration of the procedure for beta=78 gamma=01 and r=007 on 0 1^2 where points are marked with a circle of radius r2.\n\n(Image: assets/strauss_spatial_prs.gif)\n\n\n\n\n\n","category":"type"},{"location":"spatial/#PartialRejectionSampling.generate_sample-Union{Tuple{StraussPointProcess{T}}, Tuple{T}} where T","page":"Spatial point processes","title":"PartialRejectionSampling.generate_sample","text":"generate_sample(\n    pp::StraussPointProcess{T};\n    win::Union{Nothing,AbstractWindow}=nothing,\n    rng=-1\n)::Vector{T} where {T}\n\nGenererate an exact sample from PRS.StraussPointProcess.\n\nDefault window (win=nothing) is window(pp)=pp.window.\n\nDefault sampler is PRS.generate_sample_dcftp.\n\nSee also\n\nPRS.generate_sample_grid_prs.\n\n\n\n\n\n","category":"method"},{"location":"spatial/#PartialRejectionSampling.generate_sample_prs-Union{Tuple{StraussPointProcess{T}}, Tuple{T}} where T","page":"Spatial point processes","title":"PartialRejectionSampling.generate_sample_prs","text":"generate_sample_prs(\n    pp::StraussPointProcess{T};\n    win::Union{Nothing,AbstractWindow}=nothing,\n    rng=-1\n)::Vector{T} where {T}\n\nGenererate an exact sample from PRS.StraussPointProcess using Partial Rejection Sampling (PRS).\n\nDefault window (win=nothing) is window(pp)=pp.window.\n\nDefault sampler is PRS.generate_sample_grid_prs.\n\n\n\n\n\n","category":"method"},{"location":"spatial/#PartialRejectionSampling.gibbs_interaction-Union{Tuple{T}, Tuple{StraussPointProcess{T},PartialRejectionSampling.SpatialCellGridPRS{T},PartialRejectionSampling.SpatialCellGridPRS{T}}} where T","page":"Spatial point processes","title":"PartialRejectionSampling.gibbs_interaction","text":"gibbs_interaction(\n    pp::StraussPointProcess{T},\n    cell1::SpatialCellGridPRS{T},\n    cell2::SpatialCellGridPRS{T}\n)::Real where {T}\n\nCompute the pairwise Gibbs interaction for a PRS.StraussPointProcess between C_1=cell1 and C_2=cell2,\n\n    prod_(x y) in C_1 times C_2\n        gamma^ 1_ leftx - yright_2 leq r  \n\n\n\n\n\n","category":"method"},{"location":"spatial/#PartialRejectionSampling.intensity-Tuple{StraussPointProcess}","page":"Spatial point processes","title":"PartialRejectionSampling.intensity","text":"intensity(pp::StraussPointProcess) = pp.β\n\n\n\n\n\n","category":"method"},{"location":"spatial/#PartialRejectionSampling.interaction_coefficient-Tuple{StraussPointProcess}","page":"Spatial point processes","title":"PartialRejectionSampling.interaction_coefficient","text":"interaction_coefficient(pp::StraussPointProcess) = pp.γ\n\n\n\n\n\n","category":"method"},{"location":"spatial/#PartialRejectionSampling.interaction_range-Tuple{StraussPointProcess}","page":"Spatial point processes","title":"PartialRejectionSampling.interaction_range","text":"interaction_range(pp::StraussPointProcess) = pp.r\n\n\n\n\n\n","category":"method"},{"location":"spatial/#PartialRejectionSampling.isattractive-Tuple{StraussPointProcess}","page":"Spatial point processes","title":"PartialRejectionSampling.isattractive","text":"isattractive(pp::StraussPointProcess) = false\n\nWe consider only repulsive PRS.StraussPointProcess since 0 leq gamma leq 1.\n\n\n\n\n\n","category":"method"},{"location":"spatial/#PartialRejectionSampling.isrepulsive-Tuple{StraussPointProcess}","page":"Spatial point processes","title":"PartialRejectionSampling.isrepulsive","text":"isrepulsive(pp::StraussPointProcess) = true\n\nWe consider only repulsive PRS.StraussPointProcess since 0 leq gamma leq 1.\n\n\n\n\n\n","category":"method"},{"location":"spatial/#PartialRejectionSampling.papangelou_conditional_intensity-Union{Tuple{T}, Tuple{StraussPointProcess{Array{T,1}},AbstractArray{T,1},Union{AbstractSet{Array{T,1}}, AbstractArray{Array{T,1},1}}}} where T","page":"Spatial point processes","title":"PartialRejectionSampling.papangelou_conditional_intensity","text":"papangelou_conditional_intensity(\n    pp::StraussPointProcess{Vector{T}},\n    x::AbstractVector{T},\n    X::Union{AbstractVector{Vector{T}}, AbstractSet{Vector{T}}}\n)::Real where {T}\n\nCompute the Papangelou conditional intensity of the point process pp\n\n    beta\n    gamma^y in X  left x - y right_2 leq r\n     1_x notin X\n\nwhere beta= pp.β, gamma= pp.γ and r= pp.r.\n\n\n\n\n\n","category":"method"},{"location":"spatial/#PartialRejectionSampling.upper_bound_papangelou_conditional_intensity-Tuple{StraussPointProcess}","page":"Spatial point processes","title":"PartialRejectionSampling.upper_bound_papangelou_conditional_intensity","text":"upper_bound_papangelou_conditional_intensity(pp::StraussPointProcess) = intensity(pp)\n\n\n\n\n\n","category":"method"},{"location":"spatial/#Windows","page":"Spatial point processes","title":"Windows","text":"","category":"section"},{"location":"spatial/","page":"Spatial point processes","title":"Spatial point processes","text":"PRS.AbstractSpatialWindow","category":"page"},{"location":"spatial/#PartialRejectionSampling.AbstractSpatialWindow","page":"Spatial point processes","title":"PartialRejectionSampling.AbstractSpatialWindow","text":"AbstractSpatialWindow{T<:Float64} <: AbstractWindow{T}\n\nAbstract type representing a spatial window subseteq mathbbR^d\n\nSee also\n\nPRS.AbstractRectangleWindow\nPRS.RectangleWindow\nPRS.SquareWindow\nPRS.BallWindow\n\n\n\n\n\n","category":"type"},{"location":"spatial/","page":"Spatial point processes","title":"Spatial point processes","text":"Modules = [PartialRejectionSampling]\nPages   = [\"spatial/window.jl\"]\nPrivate = true\nOrder = [:type, :function, :macro]","category":"page"},{"location":"spatial/#PartialRejectionSampling.AbstractRectangleWindow","page":"Spatial point processes","title":"PartialRejectionSampling.AbstractRectangleWindow","text":"AbstractRectangleWindow{T<:Float64} <: AbstractSpatialWindow{T}\n\nAbstract type representing a hyperrectangle prod_i c_i c_i + w_i\n\nSee also\n\nPRS.RectangleWindow,\nPRS.SquareWindow.\n\n\n\n\n\n","category":"type"},{"location":"spatial/#PartialRejectionSampling.BallWindow","page":"Spatial point processes","title":"PartialRejectionSampling.BallWindow","text":"BallWindow{T<:Float64} <: AbstractSpatialWindow{T}\n\nStructure representing a closed ball B(c r), with fields\n\nc center of the ball,\nr radius of the ball.\n\n\n\n\n\n","category":"type"},{"location":"spatial/#PartialRejectionSampling.BallWindow-2","page":"Spatial point processes","title":"PartialRejectionSampling.BallWindow","text":"BallWindow(c::AbstractVector=zeros(2), r::Real)\n\nConstruct a PRS.BallWindow.\n\n\n\n\n\n","category":"type"},{"location":"spatial/#PartialRejectionSampling.RectangleWindow","page":"Spatial point processes","title":"PartialRejectionSampling.RectangleWindow","text":"RectangleWindow{T<:Float64} <: AbstractRectangleWindow{T}\n\nStructure representing a hyperrectangle prod_i c_i c_i + w_i, with fields\n\nc lower left corner of the hyperrectangle\nw width vector of the hyperrectangle along each coordinate\n\n\n\n\n\n","category":"type"},{"location":"spatial/#PartialRejectionSampling.RectangleWindow-Tuple{AbstractArray{T,1} where T,Array{T,1} where T}","page":"Spatial point processes","title":"PartialRejectionSampling.RectangleWindow","text":"RectangleWindow(c::AbstractVector, w::Vector)\n\nConstruct a PRS.RectangleWindow.\n\n\n\n\n\n","category":"method"},{"location":"spatial/#PartialRejectionSampling.SquareWindow","page":"Spatial point processes","title":"PartialRejectionSampling.SquareWindow","text":"SquareWindow{T<:Float64} <: AbstractRectangleWindow{T}\n\nStructure representing a hypercube prod_i c_i c_i + w, with fields\n\nc lower left corner of the hypercube,\nw length of the hypercube.\n\n\n\n\n\n","category":"type"},{"location":"spatial/#PartialRejectionSampling.SquareWindow-2","page":"Spatial point processes","title":"PartialRejectionSampling.SquareWindow","text":"SquareWindow(c::AbstractVector=zeros(2), w::Real=1)\n\nConstruct a PRS.SquareWindow.\n\n\n\n\n\n","category":"type"},{"location":"spatial/#Base.in-Tuple{AbstractArray{T,1} where T,BallWindow}","page":"Spatial point processes","title":"Base.in","text":"Base.in(\n    x::AbstractVector,\n    win::AbstractRectangleWindow\n)\n\nCheck if x in B(c r), i.e., left x - c right leq r.\n\n\n\n\n\n","category":"method"},{"location":"spatial/#Base.in-Tuple{AbstractArray{T,1} where T,PartialRejectionSampling.AbstractRectangleWindow}","page":"Spatial point processes","title":"Base.in","text":"Base.in(\n    x::AbstractVector,\n    win::AbstractRectangleWindow\n)\n\nCheck if x in prod_i c_i c_i + w_i.\n\n\n\n\n\n","category":"method"},{"location":"spatial/#Base.rand-Union{Tuple{BallWindow{T}}, Tuple{T}} where T","page":"Spatial point processes","title":"Base.rand","text":"Base.rand(\n    win::BallWindow{T};\n    rng=-1\n)::Vector{T} where {T}\n\nSample uniformly at random in window win.\n\n\n\n\n\n","category":"method"},{"location":"spatial/#Base.rand-Union{Tuple{PartialRejectionSampling.AbstractRectangleWindow{T}}, Tuple{T}} where T","page":"Spatial point processes","title":"Base.rand","text":"Base.rand(\n    win::AbstractRectangleWindow{T};\n    rng=-1\n)::Vector{T} where {T}\n\nSample uniformly at random in window win.\n\n\n\n\n\n","category":"method"},{"location":"spatial/#Base.rand-Union{Tuple{T}, Tuple{BallWindow{T},Int64}} where T","page":"Spatial point processes","title":"Base.rand","text":"Base.rand(\n    win::BallWindow{T},\n    n::Int;\n    rng=-1\n)::Matrix{T} where {T}\n\nSample n points uniformly at random in window win.\n\n\n\n\n\n","category":"method"},{"location":"spatial/#Base.rand-Union{Tuple{T}, Tuple{PartialRejectionSampling.AbstractRectangleWindow{T},Int64}} where T","page":"Spatial point processes","title":"Base.rand","text":"Base.rand(\n    win::AbstractRectangleWindow{T},\n    n::Int;\n    rng=-1\n)::Matrix{T} where {T}\n\nSample n points uniformly at random in window win.\n\n\n\n\n\n","category":"method"},{"location":"spatial/#PartialRejectionSampling.dimension-Tuple{AbstractSpatialWindow}","page":"Spatial point processes","title":"PartialRejectionSampling.dimension","text":"dimension(win::AbstractSpatialWindow) = length(win.c)\n\nReturn the dimension of window win.\n\n\n\n\n\n","category":"method"},{"location":"spatial/#PartialRejectionSampling.rectangle_square_window-Tuple{Any,Any}","page":"Spatial point processes","title":"PartialRejectionSampling.rectangle_square_window","text":"rectangle_square_window(c, w)\n\nConstruct a PRS.RectangleWindow or a PRS.SquareWindow depending .on whether all coordinates of w are the same.\n\n\n\n\n\n","category":"method"},{"location":"spatial/#PartialRejectionSampling.volume-Tuple{BallWindow}","page":"Spatial point processes","title":"PartialRejectionSampling.volume","text":"volume(win::BallWindow) =\n\nReturn the volume of the ball B(c r)subseteq R^d as\n\n    fracπ^d2 r^dGamma(d2 + 1) cdot\n\n\n\n\n\n","category":"method"},{"location":"spatial/#PartialRejectionSampling.volume-Tuple{RectangleWindow}","page":"Spatial point processes","title":"PartialRejectionSampling.volume","text":"volume(win::RectangleWindow) = prod(win.w)\n\n\n\n\n\n","category":"method"},{"location":"spatial/#PartialRejectionSampling.volume-Tuple{SquareWindow}","page":"Spatial point processes","title":"PartialRejectionSampling.volume","text":"volume(win::SquareWindow) = win.w^dimension(win)\n\n\n\n\n\n","category":"method"},{"location":"references/#References","page":"References","title":"References","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"","category":"page"},{"location":"misc/#Pattern-free-string","page":"Miscellaneous","title":"Pattern free string","text":"","category":"section"},{"location":"misc/","page":"Miscellaneous","title":"Miscellaneous","text":"Modules = [PartialRejectionSampling]\nPages   = [\"misc/pattern_free_string.jl\"]\nPrivate = true\nOrder = [:module, :constant, :type, :function, :macro]","category":"page"},{"location":"misc/#PartialRejectionSampling.PatternFreeString","page":"Miscellaneous","title":"PartialRejectionSampling.PatternFreeString","text":"PatternFreeString{T<:String} <: AbstractPointProcess{T}\n\nContainer with fields alphabet and pattern used to generate a string made of characters from alphabet avoiding the prescribed pattern.\n\n\n\n\n\n","category":"type"},{"location":"misc/#PartialRejectionSampling.PatternFreeString-Tuple{Array{String,1},String}","page":"Miscellaneous","title":"PartialRejectionSampling.PatternFreeString","text":"PatternFreeString(alphabet::Vector{String}, pattern::String)\n\nConstruct a PRS.PatternFreeString.\n\nusing PartialRejectionSampling\nPRS.PatternFreeString([\"A\", \"C\", \"G\", \"T\"], \"ATGTA\")\n\n# output\n\nPatternFreeString{String}\n- alphabet = [\"A\", \"C\", \"G\", \"T\"]\n- pattern = ATGTA\n\n\n\n\n\n","category":"method"},{"location":"misc/#PartialRejectionSampling._generate_sample_pattern_free_string_prs-Union{Tuple{T}, Tuple{Array{T,1},T,Int64}} where T<:AbstractString","page":"Miscellaneous","title":"PartialRejectionSampling._generate_sample_pattern_free_string_prs","text":"generate_pattern_free_string_prs(\n    alphabet::Vector{T},\n    pattern::T,\n    size::Int;\n    rng=-1\n)::T where {T<:AbstractString}\n\nGenerate a string uniformly at random among all strings made of characters from alphabet with no occurence of the pattern pattern, using a tailored version of Partial Rejection Sampling (PRS) derived by Juan Gil , Joshua Amaniampong , Jake Wellens  (2018)\n\n\n\n\n\n","category":"method"},{"location":"misc/#PartialRejectionSampling.find_bad_ranges-Union{Tuple{T}, Tuple{T,T}} where T<:AbstractString","page":"Miscellaneous","title":"PartialRejectionSampling.find_bad_ranges","text":"find_bad_ranges(\n    pattern::T,\n    string::T\n)::Vector{UnitRange} where {T<:AbstractString}\n\nIdentify where pattern occur in string and return the corresponding ranges of indices.\n\n\n\n\n\n","category":"method"},{"location":"misc/#PartialRejectionSampling.find_characters_to_resample-Union{Tuple{U}, Tuple{T}, Tuple{Array{T,1},T,Array{U,1}}} where U<:Int64 where T<:String","page":"Miscellaneous","title":"PartialRejectionSampling.find_characters_to_resample","text":"find_characters_to_resample(\n    string_vec::Vector{T},\n    pattern::T,\n    pref_suff::Vector{U}\n)::Vector{U} where {T<:String, U<:Int}\n\nIdentify the set of events to be resampled as constructed by Algorithm 5 in Heng Guo , Mark Jerrum , Jingcheng Liu  (2019) as part of the Partial Rejection Sampling (PRS) method. Return the indices of the variables involved in the corresponding events.\n\nSee also\n\nPRS.find_bad_ranges\n\n\n\n\n\n","category":"method"},{"location":"misc/#PartialRejectionSampling.generate_sample!-Union{Tuple{T}, Tuple{Array{T,1},Any,Array{T,1}}} where T<:AbstractString","page":"Miscellaneous","title":"PartialRejectionSampling.generate_sample!","text":"generate_sample!(\n    string_vec::Vector{T},\n    indices,\n    alphabet::Vector{T};\n    rng=-1\n) where {T<:AbstractString}\n\nGenerate a character uniformly at random from alphabet at positions prescribed by indices in string_vec\n\n\n\n\n\n","category":"method"},{"location":"misc/#PartialRejectionSampling.generate_sample-Union{Tuple{T}, Tuple{PatternFreeString{T},Int64}} where T","page":"Miscellaneous","title":"PartialRejectionSampling.generate_sample","text":"generate_sample(\n    pfs::PatternFreeString{T},\n    size::Int;\n    rng=-1\n)::T where {T<:String}\n\nGenerate a string uniformly at random among all strings made of characters from pfs.alphabet with no occurence of the pattern pfs.pattern.\n\nDefault sampler is PRS.generate_sample_prs.\n\n\n\n\n\n","category":"method"},{"location":"misc/#PartialRejectionSampling.generate_sample_prs-Union{Tuple{T}, Tuple{PatternFreeString{T},Int64}} where T<:String","page":"Miscellaneous","title":"PartialRejectionSampling.generate_sample_prs","text":"generate_sample_prs(\n    pfs::PatternFreeString{T},\n    size::Int;\n    rng=-1\n)::T where {T<:String}\n\nGenerate a string uniformly at random among all strings made of characters from pfs.alphabet with no occurence of the pattern pfs.pattern, using a tailored version of Partial Rejection Sampling (PRS) derived by Juan Gil , Joshua Amaniampong , Jake Wellens  (2018).\n\nusing PartialRejectionSampling\npfs = PRS.PatternFreeString([\"A\", \"C\", \"G\", \"T\"], \"ATGTA\")\nPRS.generate_sample_prs(pfs, 20; rng=1)\n# output\n\"TCCAAATCTCCCCTGTCTAT\"\n\n\n\n\n\n","category":"method"},{"location":"graph/#Graph-point-processes","page":"Graph point processes","title":"Graph point processes","text":"","category":"section"},{"location":"graph/","page":"Graph point processes","title":"Graph point processes","text":"PRS.AbstractGraphPointProcess\nPRS.GraphNode","category":"page"},{"location":"graph/#PartialRejectionSampling.AbstractGraphPointProcess","page":"Graph point processes","title":"PartialRejectionSampling.AbstractGraphPointProcess","text":"AbstractGraphPointProcess{T<:Vector{Float64}} <: AbstractPointProcess{T}\n\nAbstract type encoding point processes defined on graphs\n\n\n\n\n\n","category":"type"},{"location":"graph/#PartialRejectionSampling.GraphNode","page":"Graph point processes","title":"PartialRejectionSampling.GraphNode","text":"GraphNode{T<:Int64} <: AbstractDiscreteWindow{T}\n\nStructure with unique field idx representing the index of the vertex of a graph.\n\n\n\n\n\n","category":"type"},{"location":"graph/#Hard-core-graph","page":"Graph point processes","title":"Hard core graph","text":"","category":"section"},{"location":"graph/","page":"Graph point processes","title":"Graph point processes","text":"Modules = [PartialRejectionSampling]\nPages   = [\"graph/hard_core.jl\"]\nPrivate = true\nOrder = [:module, :constant, :type, :function, :macro]","category":"page"},{"location":"graph/#PartialRejectionSampling.HardCoreGraph","page":"Graph point processes","title":"PartialRejectionSampling.HardCoreGraph","text":"HardCoreGraph{T<:Integer} <: AbstractGraphPointProcess{T}\n\nConcrete type representing a point process on the vertices of a graph =(V E) parametrized by beta geq 0 which characterizes the distribution on the independent sets of graph, where each vertex is present with marginal probability fracbeta1+beta.\n\nIn other words, it can also be viewed as the product distribution operatornameBernoulli(fracbeta1+beta)^otimes V on the vertices of graph conditioned on forming an independent set,\n\n    mathbbPleft mathcalX = X right\n    propto\n    prod_xin X\n        fracbeta1+beta\n     1_X textforms an independent set\n\nSee also\n\nSection 7.2 of Heng Guo , Mark Jerrum , Jingcheng Liu  (2019),\nExample 4.1 of MoKr20,\nPRS.HardCorePointProcess, the spatial counterpart of PRS.HardCoreGraph.\n\nExample\n\nA realization from a 5times 5 grid graph, with beta = 05.\n\n(Image: assets/hard_core_graph.png)\n\n\n\n\n\n","category":"type"},{"location":"graph/#PartialRejectionSampling.HardCoreGraph-Union{Tuple{T}, Tuple{LightGraphs.SimpleGraphs.SimpleGraph{T},Real}} where T<:Integer","page":"Graph point processes","title":"PartialRejectionSampling.HardCoreGraph","text":"HardCoreGraph(\n    graph::LG.SimpleGraph{T},\n    β::Real\n) where {T<:Integer}\n\nConstruct a PRS.HardCoreGraph.\n\nusing PartialRejectionSampling\nusing LightGraphs; const LG = LightGraphs\n\ng, β = LG.grid([5, 5]), 1\nPRS.HardCoreGraph(g, β)\n\n# output\n\nHardCoreGraph{Int64}\n- graph = {25, 40} undirected simple Int64 graph\n- β = 1.0\n\n\n\n\n\n","category":"method"},{"location":"graph/#PartialRejectionSampling.generate_sample-Union{Tuple{HardCoreGraph{T}}, Tuple{T}} where T","page":"Graph point processes","title":"PartialRejectionSampling.generate_sample","text":"generate_sample(\n    pp::HardCoreGraph{T};\n    rng=-1\n)::Vector{T} where {T}\n\nGenerate an exact sample from the PRS.SinkFreeGraph.\n\nDefault sampler is PRS.generate_sample_prs.\n\n\n\n\n\n","category":"method"},{"location":"graph/#PartialRejectionSampling.generate_sample_prs-Union{Tuple{HardCoreGraph{T}}, Tuple{T}} where T","page":"Graph point processes","title":"PartialRejectionSampling.generate_sample_prs","text":"generate_sample_prs(\n    pp::HardCoreGraph{T};\n    rng=-1\n)::Vector{T} where {T}\n\nSample from PRS.HardCoreGraph using Partial Rejection Sampling (PRS), see Section 7.2 of Heng Guo , Mark Jerrum , Jingcheng Liu  (2019)\n\nSee also\n\nExample 4.1 of MoKr20.\n\nExample\n\nAn illustration of the procedure on a 5times 5 grid graph.\n\n(Image: assets/hard_core_graph.gif)\n\n\n\n\n\n","category":"method"},{"location":"graph/#Rooted-spanning-forests","page":"Graph point processes","title":"Rooted spanning forests","text":"","category":"section"},{"location":"graph/","page":"Graph point processes","title":"Graph point processes","text":"Modules = [PartialRejectionSampling]\nPages   = [\"graph/rooted_spanning_forest.jl\"]\nPrivate = true\nOrder = [:module, :constant, :type, :function, :macro]","category":"page"},{"location":"graph/#PartialRejectionSampling.RootedSpanningForest","page":"Graph point processes","title":"PartialRejectionSampling.RootedSpanningForest","text":"RootedSpanningForest{T<:LG.SimpleDiGraph{Int64}} <: AbstractGraphPointProcess{T}\n\nConcrete type reprensenting a point process defined on the edges of a graph characterizing the uniform distribution on the spanning forests of graph rooted at roots.\n\nIt can be viewed as a the product distribution of the uniform distribution on the set of neighbors of each vertex conditioned on forming no cycles.\n\nThe object has two fields:\n\ngraph::LG.SimpleGraph{Int64}\nroots::Set{Int64}\n\nSee also\n\nSection 4.2 of Heng Guo , Mark Jerrum , Jingcheng Liu  (2019).\n\nExample\n\nA realization from a 5times 5 grid graph with roots=[13].\n\n(Image: assets/rooted_spanning_tree.png)\n\n\n\n\n\n","category":"type"},{"location":"graph/#PartialRejectionSampling.RootedSpanningForest-Union{Tuple{LightGraphs.SimpleGraphs.SimpleGraph{T}}, Tuple{T}, Tuple{LightGraphs.SimpleGraphs.SimpleGraph{T},Union{Nothing, AbstractSet{T}, AbstractArray{T,1}, T}}} where T<:Int64","page":"Graph point processes","title":"PartialRejectionSampling.RootedSpanningForest","text":"RootedSpanningForest(\n    graph::LG.SimpleGraph{T},\n    roots::Union{Nothing,T,AbstractVector{T},AbstractSet{T}}=nothing\n) where {T<:Int}\n\nConstruct a PRS.RootedSpanningForest model on graph, rooted at roots. If roots === nothing, a random vertex is selected uniformly at random among LG.vertices(g) and considered as roots.\n\nusing PartialRejectionSampling\nusing LightGraphs; const LG = LightGraphs\n\ng, roots = LG.grid([5, 5]), [1, 2, 3]\n\nrsf = PRS.RootedSpanningForest(g, roots)\n\n# output\n\nRootedSpanningForest{LightGraphs.SimpleGraphs.SimpleDiGraph{Int64}}\n- graph = {25, 40} undirected simple Int64 graph\n- roots = Set([2, 3, 1])\n\n\n\n\n\n","category":"method"},{"location":"graph/#PartialRejectionSampling._generate_sample_rooted_spanning_forest_prs-Union{Tuple{T}, Tuple{LightGraphs.SimpleGraphs.SimpleGraph{T},Any}} where T","page":"Graph point processes","title":"PartialRejectionSampling._generate_sample_rooted_spanning_forest_prs","text":"Generate a rooted spanning forest of graph, uniformly at random among all rooted spanning forests rooted at roots, using Partial Rejection Sampling (PRS), see Section 4.2 of Heng Guo , Mark Jerrum , Jingcheng Liu  (2019).\n\n\n\n\n\n","category":"method"},{"location":"graph/#PartialRejectionSampling.generate_sample-Tuple{RootedSpanningForest}","page":"Graph point processes","title":"PartialRejectionSampling.generate_sample","text":"generate_sample(\n    pp::RootedSpanningForest{T};\n    rng=-1\n)\n\nGenerate an exact sample from the PRS.RootedSpanningForest.\n\nDefault sampler is PRS.generate_sample_prs.\n\n\n\n\n\n","category":"method"},{"location":"graph/#PartialRejectionSampling.generate_sample_prs-Union{Tuple{RootedSpanningForest{T}}, Tuple{T}} where T<:LightGraphs.SimpleGraphs.SimpleDiGraph{Int64}","page":"Graph point processes","title":"PartialRejectionSampling.generate_sample_prs","text":"generate_sample_prs(\n    pp::RootedSpanningForest{T};\n    rng=-1\n)::T where {T<:LG.SimpleDiGraph{Int64}}\n\nGenerate a rooted spanning forest of pp.graph, uniformly at random among all rooted spanning forests rooted at pp.roots, using Partial Rejection Sampling (PRS), see Section 4.2 of Heng Guo , Mark Jerrum , Jingcheng Liu  (2019).\n\nExample\n\nAn illustration of the procedure on a 5times 5 grid graph, with roots=[13]\n\n(Image: assets/rooted_spanning_tree_prs.gif)\n\n\n\n\n\n","category":"method"},{"location":"graph/#Sink-free-graph","page":"Graph point processes","title":"Sink free graph","text":"","category":"section"},{"location":"graph/","page":"Graph point processes","title":"Graph point processes","text":"Modules = [PartialRejectionSampling]\nPages   = [\"graph/sink_free_graph.jl\"]\nPrivate = true\nOrder = [:module, :constant, :type, :function, :macro]","category":"page"},{"location":"graph/#PartialRejectionSampling.SinkFreeGraph","page":"Graph point processes","title":"PartialRejectionSampling.SinkFreeGraph","text":"SinkFreeGraph{T<:LG.SimpleDiGraph{Int64}} <: AbstractGraphPointProcess{T}\n\nConcrete type representing a point process on the edges of a graph characterizing the uniform distribution on the orientations of the edges conditioned on the absence of sinks.\n\nExample\n\nA realization from a 5times 5 grid graph\n\n(Image: assets/sink_free_graph.png)\n\n\n\n\n\n","category":"type"},{"location":"graph/#PartialRejectionSampling.SinkFreeGraph-Tuple{LightGraphs.SimpleGraphs.SimpleGraph{Int64}}","page":"Graph point processes","title":"PartialRejectionSampling.SinkFreeGraph","text":"SinkFreeGraph(graph::LG.SimpleGraph{T}) where {T<:Int}\n\nConstruct a PRS.SinkFreeGraph.\n\nusing PartialRejectionSampling\nusing LightGraphs; const LG = LightGraphs\n\nsfg = PRS.SinkFreeGraph(LG.grid([5, 5]))\n\n# output\n\nSinkFreeGraph{LightGraphs.SimpleGraphs.SimpleDiGraph{Int64}}\n- graph = {25, 40} undirected simple Int64 graph\n\n\n\n\n\n","category":"method"},{"location":"graph/#PartialRejectionSampling.generate_sample-Tuple{SinkFreeGraph}","page":"Graph point processes","title":"PartialRejectionSampling.generate_sample","text":"generate_sample(\n    pp::SinkFreeGraph;\n    rng=-1\n)\n\nGenerate an exact sample from the PRS.SinkFreeGraph.\n\nDefault sampler is PRS.generate_sample_prs.\n\n\n\n\n\n","category":"method"},{"location":"graph/#PartialRejectionSampling.generate_sample_prs-Union{Tuple{SinkFreeGraph{T}}, Tuple{T}} where T","page":"Graph point processes","title":"PartialRejectionSampling.generate_sample_prs","text":"generate_sample_prs(\n    pp::SinkFreeGraph{T};\n    rng=-1\n)::T where {T}\n\nGenerate an orientated version of pp.graph uniformly at random among all possible orientations conditioned on the absence of sinks, using Partial Rejection Sampling (PRS).\n\nSee also\n\nSection 4.1 of Heng Guo , Mark Jerrum , Jingcheng Liu  (2019).\n\nExample\n\nA illustration of the procedure on a 5 times 5 grid grah.\n\n(Image: assets/sink_free_graph_prs.gif)\n\n\n\n\n\n","category":"method"},{"location":"graph/#Ising-model","page":"Graph point processes","title":"Ising model","text":"","category":"section"},{"location":"graph/","page":"Graph point processes","title":"Graph point processes","text":"Modules = [PartialRejectionSampling]\nPages   = [\"graph/window.jl\",\n           \"graph/ising.jl\",\n           \"graph/ising_sampling_gibbs_perfect.jl\",\n           \"graph/ising_sampling_grid_prs\"]\nPrivate = true\nOrder = [:module, :constant, :type, :function, :macro]","category":"page"},{"location":"graph/#PartialRejectionSampling.Ising","page":"Graph point processes","title":"PartialRejectionSampling.Ising","text":"Ising{T<:Int} <: AbstractGraphPointProcess{T}\n\nThe Ising model characterizes a point process defined on the vertices of a graph (V E) with joint density proportional to\n\n    mathbbPleft mathcalX=X right\n    propto\n    prod_i in V\n        exp(h_i x_i)\n    prod_i j in E\n        exp(J x_i x_j)\n\nwhere (h_i)_V are called magnetization paremeters and J the interaction coefficient (J gtreqless 0 characterizes ferro/antiferro magnetic interactions).\n\nExample\n\nA realization from a 5times 5 grid graph, with h = 02 J = 01.\n\n(Image: assets/ising.png)\n\n\n\n\n\n","category":"type"},{"location":"graph/#PartialRejectionSampling.Ising-Union{Tuple{T}, Tuple{Array{T,1},Real}, Tuple{Array{T,1},Real,Union{Array{Real,1}, Real}}} where T<:Int64","page":"Graph point processes","title":"PartialRejectionSampling.Ising","text":"Ising(\n    dims::Vector{T},\n    J::Real,\n    h::Union{Real,Vector{Real}}=0;\n    periodic::Bool=true\n) where {T<:Int}\n\nConstruct PRS.Ising on a grid graph with dimension dims, interaction parameter J and magnetization h.\n\nPeriodic boundary conditions on the grid graph are set according to periodic.\n\nusing PartialRejectionSampling\n\ndims = [5, 5]\nJ, h = 0.01, 0\nPRS.Ising(dims, J, h; periodic=true)\n\n# output\n\nIsing{Int64}\n- graph = {25, 50} undirected simple Int64 graph\n- J = 0.01 (interaction)\n- h = 0.0 (magnetization)\n\n\n\n\n\n","category":"method"},{"location":"graph/#PartialRejectionSampling.Ising-Union{Tuple{T}, Tuple{LightGraphs.SimpleGraphs.SimpleGraph{T},Real}, Tuple{LightGraphs.SimpleGraphs.SimpleGraph{T},Real,Union{Array{Real,1}, Real}}} where T<:Int64","page":"Graph point processes","title":"PartialRejectionSampling.Ising","text":"Ising(\n    graph::LG.SimpleGraph{T},\n    J::Real,\n    h::Union{Real,Vector{Real}}=0\n) where {T<:Int}\n\nConstruct PRS.Ising on graph with interaction parameter J and magnetization h.\n\nusing PartialRejectionSampling\nusing LightGraphs; const LG = LightGraphs\n\ngraph = LG.grid([5, 5])\nJ, h = 0.01, 0\nPRS.Ising(graph, J, h)\n\n# output\n\nIsing{Int64}\n- graph = {25, 40} undirected simple Int64 graph\n- J = 0.01 (interaction)\n- h = 0.0 (magnetization)\n\n\n\n\n\n","category":"method"},{"location":"graph/#PartialRejectionSampling.generate_sample!-Union{Tuple{T}, Tuple{AbstractArray{T,1},Any,Ising{T}}} where T<:Int64","page":"Graph point processes","title":"PartialRejectionSampling.generate_sample!","text":"generate_sample!(\n    state::AbstractVector{T},\n    indices,\n    ising::Ising{T};\n    rng=-1\n) where {T<:Int}\n\nGenerate an exact sample from the marginal distribution of each states of the PRS.Ising model ising at the prescribed indices.\n\n\n\n\n\n","category":"method"},{"location":"graph/#PartialRejectionSampling.generate_sample-Union{Tuple{T}, Tuple{Ising{T},T}} where T<:Int64","page":"Graph point processes","title":"PartialRejectionSampling.generate_sample","text":"generate_sample(\n    pp::Ising{T},\n    idx::T;\n    rng=-1\n)::T where {T<:Int}\n\nGenerate an exact sample from the marginal distribution of state i= idx of pp.\n\nMore specifically,\n\n    x_i\n        sim\n        operatornameBernoulli_-1 1\n            (sigma(h_i))\n\nwhere sigma denotes the sigmoid function.\n\n\n\n\n\n","category":"method"},{"location":"graph/#PartialRejectionSampling.generate_sample_conditional!-Union{Tuple{T}, Tuple{AbstractArray{T,1},T,Ising{T}}} where T<:Int64","page":"Graph point processes","title":"PartialRejectionSampling.generate_sample_conditional!","text":"generate_sample_conditional!(\n    state::AbstractVector{T},\n    i::T,\n    ising::Ising{T};\n    rng=-1\n) where {T<:Int}\n\nGenerate an exact sample from the conditional distribution of the state x_i given its neighboring states in ising.graph. More specifically,\n\n    x_i mid x_N(i)\n        sim\n        operatornameBernoulli_-1 1\n            (sigma(h_i + J sum_j in N(i) x_j))\n\nwhere sigma denotes the sigmoid function(httpsenwikipediaorgwikiSigmoid_function)\n\n\n\n\n\n","category":"method"},{"location":"graph/#PartialRejectionSampling.generate_sample_prs-Tuple{Ising}","page":"Graph point processes","title":"PartialRejectionSampling.generate_sample_prs","text":"generate_sample_prs(pp::Ising; rng=-1)\n\nGenerate an exact sample form pp using Partial Rejection Sampling (PRS), see Section 4.2 of Heng Guo , Mark Jerrum , Jingcheng Liu  (2019).\n\nDefault sampler is PRS.generate_sample_grid_prs.\n\nSee also\n\nWeiming Feng , Nisheeth K. Vishnoi , Yitong Yin  (2019),\nWeiming Feng , Heng Guo , Yitong Yin  (2019) PRS.generate_sample_gibbs_perfect.\n\n\n\n\n\n","category":"method"},{"location":"graph/#PartialRejectionSampling.bayes_filter-Union{Tuple{T}, Tuple{Ising{T},AbstractArray{T,1},T,Set{T}}} where T<:Int64","page":"Graph point processes","title":"PartialRejectionSampling.bayes_filter","text":"bayes_filter(\n    ising::Ising{T},\n    state::AbstractVector{T},\n    i::T,\n    R::Set{T};\n    rng=-1\n)::Bool\n\nThis function is used as a subroutine of PRS.generate_sample_gibbs_perfect.\n\n\n\n\n\n","category":"method"},{"location":"graph/#PartialRejectionSampling.generate_sample_gibbs_perfect-Union{Tuple{Ising{T}}, Tuple{T}} where T<:Int64","page":"Graph point processes","title":"PartialRejectionSampling.generate_sample_gibbs_perfect","text":"generate_sample_gibbs_perfect(\n    ising::Ising{T};\n    rng=-1\n)::Vector{T} where {T<:Int}\n\nGenerate an exact realization of the PRS.Ising model using a tailored implementation of the perfect Gibbs sampler of Weiming Feng , Heng Guo , Yitong Yin  (2019).\n\n\n\n\n\n","category":"method"},{"location":"sampling/#Sampling-methods","page":"Sampling methods","title":"Sampling methods","text":"","category":"section"},{"location":"sampling/","page":"Sampling methods","title":"Sampling methods","text":"Below is the list of point processes which can be sampled exactly using PartialRejectionSampling.jl","category":"page"},{"location":"sampling/","page":"Sampling methods","title":"Sampling methods","text":"Spatial point processes\nPRS.HardCorePointProcess\nPRS.HomogeneousPoissonPointProcess\nPRS.StraussPointProcess\nGraph point processes\nPRS.HardCoreGraph\nPRS.Ising\nPRS.RootedSpanningForest\nPRS.SinkFreeGraph\nMiscellaneous\nPRS.PatternFreeString","category":"page"},{"location":"sampling/#Default-exact-sampler","page":"Sampling methods","title":"Default exact sampler","text":"","category":"section"},{"location":"sampling/","page":"Sampling methods","title":"Sampling methods","text":"PRS.generate_sample","category":"page"},{"location":"sampling/#PartialRejectionSampling.generate_sample","page":"Sampling methods","title":"PartialRejectionSampling.generate_sample","text":"generate_sample(\n    pp::HomogeneousPoissonPointProcess{Vector{T}};\n    win::Union{Nothing,AbstractWindow}=nothing,\n    rng=-1\n)::Matrix{T} where {T<:Float64}\n\nGenerate an exact sample from PRS.HomogeneousPoissonPointProcess on window win. Sampled points are stored as columns of the output matrix.\n\nDefault window (win=nothing) is window(pp).\n\n\n\n\n\ngenerate_sample(\n    pp::HardCorePointProcess{T}\n    win::Union{Nothing,AbstractWindow}=nothing,\n    rng=-1\n)::Vector{T} where {T}\n\nGenerate an exact sample from the PRS.HardCorePointProcess.\n\nDefault window (win=nothing) is window(pp)=pp.window.\n\nDefault sampler is PRS.generate_sample_prs.\n\nSee also\n\nPRS.generate_sample_dcftp,\nPRS.generate_sample_grid_prs.\n\n\n\n\n\ngenerate_sample(\n    pp::StraussPointProcess{T};\n    win::Union{Nothing,AbstractWindow}=nothing,\n    rng=-1\n)::Vector{T} where {T}\n\nGenererate an exact sample from PRS.StraussPointProcess.\n\nDefault window (win=nothing) is window(pp)=pp.window.\n\nDefault sampler is PRS.generate_sample_dcftp.\n\nSee also\n\nPRS.generate_sample_grid_prs.\n\n\n\n\n\ngenerate_sample(\n    pp::Ising{T},\n    idx::T;\n    rng=-1\n)::T where {T<:Int}\n\nGenerate an exact sample from the marginal distribution of state i= idx of pp.\n\nMore specifically,\n\n    x_i\n        sim\n        operatornameBernoulli_-1 1\n            (sigma(h_i))\n\nwhere sigma denotes the sigmoid function.\n\n\n\n\n\ngenerate_sample(\n    pp::Ising;\n    win::GraphNode,\n    rng=-1\n)\n\nGenerate an exact sample from the marginal distribution of pp at state indexed by win.idx.\n\n\n\n\n\ngenerate_sample(\n    pp::HardCoreGraph{T};\n    rng=-1\n)::Vector{T} where {T}\n\nGenerate an exact sample from the PRS.SinkFreeGraph.\n\nDefault sampler is PRS.generate_sample_prs.\n\n\n\n\n\ngenerate_sample(\n    pp::RootedSpanningForest{T};\n    rng=-1\n)\n\nGenerate an exact sample from the PRS.RootedSpanningForest.\n\nDefault sampler is PRS.generate_sample_prs.\n\n\n\n\n\ngenerate_sample(\n    pp::SinkFreeGraph;\n    rng=-1\n)\n\nGenerate an exact sample from the PRS.SinkFreeGraph.\n\nDefault sampler is PRS.generate_sample_prs.\n\n\n\n\n\ngenerate_sample(\n    pfs::PatternFreeString{T},\n    size::Int;\n    rng=-1\n)::T where {T<:String}\n\nGenerate a string uniformly at random among all strings made of characters from pfs.alphabet with no occurence of the pattern pfs.pattern.\n\nDefault sampler is PRS.generate_sample_prs.\n\n\n\n\n\n","category":"function"},{"location":"sampling/#Partial-Rejection-Sampling-(PRS)","page":"Sampling methods","title":"Partial Rejection Sampling (PRS)","text":"","category":"section"},{"location":"sampling/","page":"Sampling methods","title":"Sampling methods","text":"Heng Guo , Mark Jerrum , Jingcheng Liu  (2019) developed the PRS methodology to generate exact samples from product distributions of the form otimes_n=1^N mu_n subject to some constraints. It requires access to an exact sampler for each mu_n and an oracle to check the violation of the constraints.","category":"page"},{"location":"sampling/","page":"Sampling methods","title":"Sampling methods","text":"Given an initial sample from otimes_n=1^N mu_n:","category":"page"},{"location":"sampling/","page":"Sampling methods","title":"Sampling methods","text":"Vanilla rejection sampling resample all variables if any constraint is violated; until all constraints are satisfied,\nPartial rejection sampling instead constructs a subset of variables to be resampled, starting from variables involved in violated constraints, and preserves the state of the variables outside of this resampling set; until all constraints are satisfied.","category":"page"},{"location":"sampling/","page":"Sampling methods","title":"Sampling methods","text":"In both cases, the output sample is guaranteed to have the right distribution, i.e., the product distribution subject to the prescribed constraints.","category":"page"},{"location":"sampling/","page":"Sampling methods","title":"Sampling methods","text":"PRS.generate_sample_prs","category":"page"},{"location":"sampling/#PartialRejectionSampling.generate_sample_prs","page":"Sampling methods","title":"PartialRejectionSampling.generate_sample_prs","text":"generate_sample_prs(\n    pp::HardCorePointProcess{T}\n    win::Union{Nothing,AbstractWindow}=nothing,\n    rng=-1\n)::Vector{T} where {T}\n\nSample from PRS.HardCorePointProcess using Partial Rejection Sampling (PRS) of Heng Guo , Mark Jerrum  (2018).\n\nDefault window (win=nothing) is window(pp)=pp.window.\n\nSee also\n\nPRS.generate_sample_dcftp\nPRS.generate_sample_grid_prs.\n\nExample\n\nA illustration of the procedure for beta=38 and r=01 on 0 1^2 where points are marked with a circle of radius r2.\n\n(Image: assets/hard_core_spatial_prs.gif)\n\n\n\n\n\ngenerate_sample_prs(\n    pp::StraussPointProcess{T};\n    win::Union{Nothing,AbstractWindow}=nothing,\n    rng=-1\n)::Vector{T} where {T}\n\nGenererate an exact sample from PRS.StraussPointProcess using Partial Rejection Sampling (PRS).\n\nDefault window (win=nothing) is window(pp)=pp.window.\n\nDefault sampler is PRS.generate_sample_grid_prs.\n\n\n\n\n\ngenerate_sample_prs(pp::Ising; rng=-1)\n\nGenerate an exact sample form pp using Partial Rejection Sampling (PRS), see Section 4.2 of Heng Guo , Mark Jerrum , Jingcheng Liu  (2019).\n\nDefault sampler is PRS.generate_sample_grid_prs.\n\nSee also\n\nWeiming Feng , Nisheeth K. Vishnoi , Yitong Yin  (2019),\nWeiming Feng , Heng Guo , Yitong Yin  (2019) PRS.generate_sample_gibbs_perfect.\n\n\n\n\n\ngenerate_sample_prs(\n    pp::HardCoreGraph{T};\n    rng=-1\n)::Vector{T} where {T}\n\nSample from PRS.HardCoreGraph using Partial Rejection Sampling (PRS), see Section 7.2 of Heng Guo , Mark Jerrum , Jingcheng Liu  (2019)\n\nSee also\n\nExample 4.1 of MoKr20.\n\nExample\n\nAn illustration of the procedure on a 5times 5 grid graph.\n\n(Image: assets/hard_core_graph.gif)\n\n\n\n\n\ngenerate_sample_prs(\n    pp::RootedSpanningForest{T};\n    rng=-1\n)::T where {T<:LG.SimpleDiGraph{Int64}}\n\nGenerate a rooted spanning forest of pp.graph, uniformly at random among all rooted spanning forests rooted at pp.roots, using Partial Rejection Sampling (PRS), see Section 4.2 of Heng Guo , Mark Jerrum , Jingcheng Liu  (2019).\n\nExample\n\nAn illustration of the procedure on a 5times 5 grid graph, with roots=[13]\n\n(Image: assets/rooted_spanning_tree_prs.gif)\n\n\n\n\n\ngenerate_sample_prs(\n    pp::SinkFreeGraph{T};\n    rng=-1\n)::T where {T}\n\nGenerate an orientated version of pp.graph uniformly at random among all possible orientations conditioned on the absence of sinks, using Partial Rejection Sampling (PRS).\n\nSee also\n\nSection 4.1 of Heng Guo , Mark Jerrum , Jingcheng Liu  (2019).\n\nExample\n\nA illustration of the procedure on a 5 times 5 grid grah.\n\n(Image: assets/sink_free_graph_prs.gif)\n\n\n\n\n\ngenerate_sample_prs(\n    pfs::PatternFreeString{T},\n    size::Int;\n    rng=-1\n)::T where {T<:String}\n\nGenerate a string uniformly at random among all strings made of characters from pfs.alphabet with no occurence of the pattern pfs.pattern, using a tailored version of Partial Rejection Sampling (PRS) derived by Juan Gil , Joshua Amaniampong , Jake Wellens  (2018).\n\nusing PartialRejectionSampling\npfs = PRS.PatternFreeString([\"A\", \"C\", \"G\", \"T\"], \"ATGTA\")\nPRS.generate_sample_prs(pfs, 20; rng=1)\n# output\n\"TCCAAATCTCCCCTGTCTAT\"\n\n\n\n\n\n","category":"function"},{"location":"sampling/#Grid-Partial-Rejection-Sampling-(grid-PRS)","page":"Sampling methods","title":"Grid Partial Rejection Sampling (grid PRS)","text":"","category":"section"},{"location":"sampling/","page":"Sampling methods","title":"Sampling methods","text":"Sarat B. Moka , Dirk P. Kroese  (2020) adapted the idea of Partial Rejection Sampling (PRS) (originally derived in the finite setting) to generate exact samples from Spatial point processes with finite range of interaction, noted r  0.","category":"page"},{"location":"sampling/","page":"Sampling methods","title":"Sampling methods","text":"The name of the method grid PRS results from the combination of the Partial Rejection Sampling (PRS) methodology with a partitioning of the domain of mathbbR^2 where the target PRS.AbstractSpatialPointProcess – is divided into N cells of type PRS.SpatialCellGridPRS with size r times r,","category":"page"},{"location":"sampling/","page":"Sampling methods","title":"Sampling methods","text":"To draw the correspondence with framework of PRS developed by Heng Guo , Mark Jerrum , Jingcheng Liu  (2019), mu_n represents the target PRS.AbstractSpatialPointProcess restricted to the n-th cell, i.e., variables are point configurations.","category":"page"},{"location":"sampling/","page":"Sampling methods","title":"Sampling methods","text":"Note that the grid PRS methodology requires an efficient sampling algorithm to generate exact samples on each cell involved in the partitioning of original domain, see, e.g., PRS.generate_sample_dcftp and PRS.generate_sample_prs.","category":"page"},{"location":"sampling/","page":"Sampling methods","title":"Sampling methods","text":"See also closely related variants of grid PRS for","category":"page"},{"location":"sampling/","page":"Sampling methods","title":"Sampling methods","text":"Spatial point processes\nMark Huber  (2020)\nGraphical models\nIsing model\nWeiming Feng , Nisheeth K. Vishnoi , Yitong Yin  (2019), Weiming Feng , Heng Guo , Yitong Yin  (2019)","category":"page"},{"location":"sampling/","page":"Sampling methods","title":"Sampling methods","text":"Modules = [PartialRejectionSampling]\nPages   = [\"grid_prs.jl\"]\nPrivate = true\nOrder = [:module, :constant, :type, :function, :macro]","category":"page"},{"location":"sampling/#PartialRejectionSampling.AbstractCellGridPRS","page":"Sampling methods","title":"PartialRejectionSampling.AbstractCellGridPRS","text":"AbstractCellGridPRS\n\nAbstract type describing a cell used Grid Partial Rejection Sampling of Sarat B. Moka , Dirk P. Kroese  (2020).\n\n\n\n\n\n","category":"type"},{"location":"sampling/#PartialRejectionSampling.GraphCellGridPRS","page":"Sampling methods","title":"PartialRejectionSampling.GraphCellGridPRS","text":"GraphCellGridPRS{T} <: AbstractCellGridPRS\n\nMutable struct describing a graph node with fields\n\nwindow of type PRS.GraphNode{T}\nvalue of type T\n\n\n\n\n\n","category":"type"},{"location":"sampling/#PartialRejectionSampling.SpatialCellGridPRS","page":"Sampling methods","title":"PartialRejectionSampling.SpatialCellGridPRS","text":"SpatialCellGridPRS{T<:Vector{Float64}} <: AbstractCellGridPRS\n\nMutable struct describing a spatial cell with fields\n\nwindow of type Union{PRS.RectangleWindow,PRS.RectangleWindow}\nvalue of type Vector{T}\n\n\n\n\n\n","category":"type"},{"location":"sampling/#Base.isempty-Tuple{PartialRejectionSampling.SpatialCellGridPRS}","page":"Sampling methods","title":"Base.isempty","text":"Base.isempty(cell::SpatialCellGridPRS) = isempty(cell.value)\n\n\n\n\n\n","category":"method"},{"location":"sampling/#Base.iterate","page":"Sampling methods","title":"Base.iterate","text":"Base.iterate(cell::AbstractCellGridPRS, state=1) = iterate(cell.value, state)\n\n\n\n\n\n","category":"function"},{"location":"sampling/#PartialRejectionSampling.dimension-Tuple{PartialRejectionSampling.AbstractCellGridPRS}","page":"Sampling methods","title":"PartialRejectionSampling.dimension","text":"dimension(cell::AbstractCellGridPRS) = dimension(window(cell))\n\n\n\n\n\n","category":"method"},{"location":"sampling/#PartialRejectionSampling.find_bad_cells_indices!-Union{Tuple{V}, Tuple{U}, Tuple{T}, Tuple{SimpleWeightedGraphs.SimpleWeightedGraph{T,U},Array{V,1},AbstractPointProcess}} where V<:PartialRejectionSampling.AbstractCellGridPRS where U where T","page":"Sampling methods","title":"PartialRejectionSampling.find_bad_cells_indices!","text":"find_bad_cells_indices!(\n    g::SWG.SimpleWeightedGraph{T,U},\n    cells::Vector{V},\n    pp::AbstractPointProcess;\n    rng=-1\n)::Set{T} where {T,U,V<:AbstractCellGridPRS}\n\nIdentify bad events and return the corresponding cells' index. An event ij is said to be \"bad\"\n\n    leftU_ij  exp left -sum_x in C_i sum_y in C_j V(xy) right right\n\nwhere U_ij is the weight of the edge ij in the interaction graph g created by PRS.weighted_interaction_graph and V the Gibbs potential discribing the pairwise Gibbs interaction of pp\n\nNote when a bad event occurs, the corresponding U_ij is resampled hence the \"!\"\n\nThis is a subroutine of PRS.generate_sample_grid_prs.\n\n\n\n\n\n","category":"method"},{"location":"sampling/#PartialRejectionSampling.find_cells_to_resample_indices!-Union{Tuple{V}, Tuple{U}, Tuple{T}, Tuple{SimpleWeightedGraphs.SimpleWeightedGraph{T,U},Array{V,1},AbstractPointProcess}} where V<:PartialRejectionSampling.AbstractCellGridPRS where U where T","page":"Sampling methods","title":"PartialRejectionSampling.find_cells_to_resample_indices!","text":"find_cells_to_resample_indices!(\n    g::SWG.SimpleWeightedGraph{T,U},\n    cells::Vector{V},\n    pp::AbstractPointProcess;\n    rng=-1\n)::Set{T} where {T,U,V<:AbstractCellGridPRS}\n\nIdentify the set of events to be resampled as constructed by Algorithm 5 in Heng Guo , Mark Jerrum , Jingcheng Liu  (2019) as part of the Partial Rejection Sampling (PRS) method. Return the indices of the variables (here cells) involved in the corresponding events.\n\nThis function is used as a subroutine of the grid PRS methodology of Sarat B. Moka , Dirk P. Kroese  (2020), see PRS.generate_sample_grid_prs.\n\nNote if the event associated to the edge ij of g is selected to be resampled, the uniform random variable encoded as the weight of the correspond edge is resampled (hence the \"!\")\n\nThis is a subroutine of PRS.generate_sample_grid_prs.\n\n\n\n\n\n","category":"method"},{"location":"sampling/#PartialRejectionSampling.generate_sample!-Tuple{PartialRejectionSampling.AbstractCellGridPRS,AbstractPointProcess}","page":"Sampling methods","title":"PartialRejectionSampling.generate_sample!","text":"generate_sample!(\n    cell::AbstractCellGridPRS,\n    pp::AbstractPointProcess;\n    rng=-1\n)\n\nGenerate an exact sample of pp in cell.window and save it in cell.value\n\n\n\n\n\n","category":"method"},{"location":"sampling/#PartialRejectionSampling.generate_sample!-Union{Tuple{T}, Tuple{Array{T,1},Any,AbstractPointProcess}} where T<:PartialRejectionSampling.AbstractCellGridPRS","page":"Sampling methods","title":"PartialRejectionSampling.generate_sample!","text":"generate_sample!(\n    cells::Vector{T},\n    indices,\n    pp::AbstractPointProcess;\n    rng=-1\n) where {T<:AbstractCellGridPRS}\n\nApply PRS.generate_sample! to each cell of cells indexed by indices.\n\n\n\n\n\n","category":"method"},{"location":"sampling/#PartialRejectionSampling.generate_sample-Tuple{Ising}","page":"Sampling methods","title":"PartialRejectionSampling.generate_sample","text":"generate_sample(\n    pp::Ising;\n    win::GraphNode,\n    rng=-1\n)\n\nGenerate an exact sample from the marginal distribution of pp at state indexed by win.idx.\n\n\n\n\n\n","category":"method"},{"location":"sampling/#PartialRejectionSampling.generate_sample_grid_prs-Union{Tuple{AbstractPointProcess{T}}, Tuple{T}} where T","page":"Sampling methods","title":"PartialRejectionSampling.generate_sample_grid_prs","text":"generate_sample_grid_prs(\n    pp::AbstractPointProcess{T};\n    rng=-1\n)::Vector{T} where {T}\n\nGenerate an exact sample from pp using grid Partial Rejection Sampling (grid PRS) of Sarat B. Moka , Dirk P. Kroese  (2020).\n\n\n\n\n\n","category":"method"},{"location":"sampling/#PartialRejectionSampling.gibbs_interaction","page":"Sampling methods","title":"PartialRejectionSampling.gibbs_interaction","text":"gibbs_interaction(\n    pp::AbstractPointProcess{T},\n    cell1::AbstractCellGridPRS{T},\n    cell2::AbstractCellGridPRS{T}\n)::Real where {T}\n\nCompute the pairwise Gibbs interaction pp between C_1=cell1 and C_2=cell2.\n\nThis is a subroutine of PRS.generate_sample_grid_prs.\n\n\n\n\n\n","category":"function"},{"location":"sampling/#PartialRejectionSampling.gibbs_interaction-Union{Tuple{T}, Tuple{Ising{T},PartialRejectionSampling.GraphCellGridPRS{T},PartialRejectionSampling.GraphCellGridPRS{T}}} where T","page":"Sampling methods","title":"PartialRejectionSampling.gibbs_interaction","text":"gibbs_interaction(\n    ising::Ising{T},\n    xᵢ::GraphCellGridPRS{T},\n    xⱼ::GraphCellGridPRS{T}\n)::Real where {T}\n\nCompute the Gibbs interaction of PRS.Ising\n\n    exp(J x_i x_j - J))\n\nNote the Gibbs interaction is normalized in be in [0, 1] to fit the framework of Sarat B. Moka , Dirk P. Kroese  (2020) and Weiming Feng , Nisheeth K. Vishnoi , Yitong Yin  (2019).\n\n\n\n\n\n","category":"method"},{"location":"sampling/#PartialRejectionSampling.initialize_cells-Union{Tuple{AbstractSpatialPointProcess{T}}, Tuple{T}} where T","page":"Sampling methods","title":"PartialRejectionSampling.initialize_cells","text":"initialize_cells(\n    spp::AbstractSpatialPointProcess{T},\n)::Vector{SpatialCellGridPRS{T}} where {T}\n\nThe spp.window (PRS.RectangleWindow or PRS.SquareWindow) is divided into PRS.SpatialCellGridPRS of length the interaction range pp.r following the construction of Sarat B. Moka , Dirk P. Kroese  (2020) in their grid Partial Rejection Sampling (grid PRS) methodology.\n\nThis is a subroutine of PRS.generate_sample_grid_prs.\n\n\n\n\n\n","category":"method"},{"location":"sampling/#PartialRejectionSampling.initialize_cells-Union{Tuple{Ising{T}}, Tuple{T}} where T","page":"Sampling methods","title":"PartialRejectionSampling.initialize_cells","text":"initialize_cells(\n    ising::Ising{T}\n)::Vector{GraphCellGridPRS{T}} where {T}\n\nEach node of ising.graph is considered as a cell of type PRS.GraphCellGridPRS such that cell.window is a PRS.GraphNode and cell.value initialized to zero(T).\n\nThis is a subroutine of PRS.generate_sample_grid_prs.\n\n\n\n\n\n","category":"method"},{"location":"sampling/#PartialRejectionSampling.is_inner_interaction_possible-Tuple{AbstractSpatialPointProcess,PartialRejectionSampling.SpatialCellGridPRS,PartialRejectionSampling.SpatialCellGridPRS}","page":"Sampling methods","title":"PartialRejectionSampling.is_inner_interaction_possible","text":"is_inner_interaction_possible(\n    spp::AbstractSpatialPointProcess,\n    cell_i::SpatialCellGridPRS,\n    cell_j::SpatialCellGridPRS\n) = false\n\nAssume cell_i and cell_j are neighboring cells in the weighted interaction graph constructed by PRS.weighted_interaction_graph from spp and already identified in the set of variables to be resampled in PRS.generate_sample_grid_prs Since the configuration of points in the corresponding cells and the uniform random variable associated to the event \\{i,j\\} are considered fixed, there is no degree of freedom to make the interaction between cell_i and cell_j possible.\n\nThis is a subroutine of PRS.generate_sample_grid_prs.\n\n\n\n\n\n","category":"method"},{"location":"sampling/#PartialRejectionSampling.is_inner_interaction_possible-Union{Tuple{T}, Tuple{Ising{T},PartialRejectionSampling.GraphCellGridPRS{T},PartialRejectionSampling.GraphCellGridPRS{T}}} where T","page":"Sampling methods","title":"PartialRejectionSampling.is_inner_interaction_possible","text":"is_inner_interaction_possible(\n    ising::Ising{T},\n    xᵢ::GraphCellGridPRS{T},\n    xⱼ::GraphCellGridPRS{T}\n) = true\n\nAssume xᵢ and xⱼ are neighboring sites in the weighted interaction graph constructed by PRS.weighted_interaction_graph from ising.graph and already identified in the set of variables to be resampled PRS.generate_sample_grid_prs. Given the states of xᵢ and xⱼ, check whether a new assigment of U_ij (the weight of edge ij) can induce the bad event\n\n    U_ij  exp(J x_i x_j - J))\n\nThis is a subroutine of PRS.generate_sample_grid_prs.\n\n\n\n\n\n","category":"method"},{"location":"sampling/#PartialRejectionSampling.is_outer_interaction_possible-Tuple{AbstractSpatialPointProcess,PartialRejectionSampling.SpatialCellGridPRS,PartialRejectionSampling.SpatialCellGridPRS}","page":"Sampling methods","title":"PartialRejectionSampling.is_outer_interaction_possible","text":"is_outer_interaction_possible(\n    spp::AbstractSpatialPointProcess,\n    cell_i::SpatialCellGridPRS,\n    cell_j::SpatialCellGridPRS\n)::Bool\n\nAssume cell_i and cell_j are neighboring cells in the weighted interaction graph constructed by PRS.weighted_interaction_graph from spp. Given the configuration of points in cell_i, check whether a realization of spp in cell_j can induce a bad event.\n\nThis is a subroutine of PRS.generate_sample_grid_prs.\n\n\n\n\n\n","category":"method"},{"location":"sampling/#PartialRejectionSampling.is_outer_interaction_possible-Union{Tuple{T}, Tuple{Ising{T},PartialRejectionSampling.GraphCellGridPRS{T},PartialRejectionSampling.GraphCellGridPRS{T}}} where T","page":"Sampling methods","title":"PartialRejectionSampling.is_outer_interaction_possible","text":"is_outer_interaction_possible(\n    ising::Ising{T},\n    xᵢ::GraphCellGridPRS{T},\n    xⱼ::GraphCellGridPRS{T}\n) = true\n\nAssume xᵢ and xⱼ are neighboring sites in the weighted interaction graph constructed by PRS.weighted_interaction_graph from ising.graph. Given the state of xᵢ, one can always find a new assigment of xⱼ and/or U_ij (the weight of edge ij) can induce the bad event\n\n    U_ij  exp(J x_i x_j - J))\n\nThis is a subroutine of PRS.generate_sample_grid_prs.\n\n\n\n\n\n","category":"method"},{"location":"sampling/#PartialRejectionSampling.weighted_interaction_graph-Tuple{AbstractSpatialPointProcess}","page":"Sampling methods","title":"PartialRejectionSampling.weighted_interaction_graph","text":"weighted_interaction_graph(\n    pp::AbstractSpatialPointProcess;\n    rng=-1\n)::SWG.SimpleWeightedGraph\n\nConstruct the weighted interaction graph (King graph) used in PRS.generate_sample_grid_prs, to generate exact samples from PRS.AbstractSpatialPointProcess\n\nThe pp.window is divided into cells of length the interaction range pp.r. Each cell represents a vertex of the interaction (king) graph and each edge carries a uniform random varialble.\n\nSee also\n\nFigure 4 Sarat B. Moka , Dirk P. Kroese  (2020)\n\n\n\n\n\n","category":"method"},{"location":"sampling/#PartialRejectionSampling.weighted_interaction_graph-Tuple{Ising}","page":"Sampling methods","title":"PartialRejectionSampling.weighted_interaction_graph","text":"weighted_interaction_graph(\n    ising::Ising;\n    rng=-1\n)::SWG.SimpleWeightedGraph\n\nReturn a weighted version of ising.graph where each edge is attached an independent uniform random variable.\n\nThis is a subroutine of PRS.generate_sample_grid_prs.\n\n\n\n\n\n","category":"method"},{"location":"sampling/#PartialRejectionSampling.window-Tuple{PartialRejectionSampling.AbstractCellGridPRS}","page":"Sampling methods","title":"PartialRejectionSampling.window","text":"window(cell::AbstractCellGridPRS) = cell.window\n\n\n\n\n\n","category":"method"},{"location":"sampling/#Uniform-sampling-in-spatial-windows","page":"Sampling methods","title":"Uniform sampling in spatial windows","text":"","category":"section"},{"location":"sampling/","page":"Sampling methods","title":"Sampling methods","text":"Base.rand","category":"page"},{"location":"sampling/#Base.rand","page":"Sampling methods","title":"Base.rand","text":"Base.rand(\n    win::AbstractRectangleWindow{T};\n    rng=-1\n)::Vector{T} where {T}\n\nSample uniformly at random in window win.\n\n\n\n\n\nBase.rand(\n    win::AbstractRectangleWindow{T},\n    n::Int;\n    rng=-1\n)::Matrix{T} where {T}\n\nSample n points uniformly at random in window win.\n\n\n\n\n\nBase.rand(\n    win::BallWindow{T};\n    rng=-1\n)::Vector{T} where {T}\n\nSample uniformly at random in window win.\n\n\n\n\n\nBase.rand(\n    win::BallWindow{T},\n    n::Int;\n    rng=-1\n)::Matrix{T} where {T}\n\nSample n points uniformly at random in window win.\n\n\n\n\n\n","category":"function"},{"location":"sampling/#Dominated-Coupling-From-The-Past-(dCFTP)","page":"Sampling methods","title":"Dominated Coupling From The Past (dCFTP)","text":"","category":"section"},{"location":"sampling/","page":"Sampling methods","title":"Sampling methods","text":"Implementation of dominated Coupling From The Past (dCFTP) developed by Wilfrid Stephen Kendall , Jesper Møller  (1999) and Wilfrid Stephen Kendall , Jesper Møller  (2000)","category":"page"},{"location":"sampling/","page":"Sampling methods","title":"Sampling methods","text":"See also","category":"page"},{"location":"sampling/","page":"Sampling methods","title":"Sampling methods","text":"Mark L Huber  (2016)\nKendall's notes on perfect simulation","category":"page"},{"location":"sampling/","page":"Sampling methods","title":"Sampling methods","text":"Modules = [PartialRejectionSampling]\nPages   = [\"dominated_cftp.jl\"]\nPrivate = true\nOrder = [:module, :constant, :type, :function, :macro]","category":"page"},{"location":"sampling/#PartialRejectionSampling.backward_extend!-Union{Tuple{T}, Tuple{Set{T},Array{Float64,1},Array{T,1},StepRange,Real,AbstractWindow}} where T","page":"Sampling methods","title":"PartialRejectionSampling.backward_extend!","text":"backward_extend!(\n    D::Set{T},          # Dominating process\n    M::Vector{Float64}, # Marking process\n    R::Vector{T},       # Recording process\n    steps::StepRange,   # Number of backward steps\n    birth_rate::Real,\n    win::AbstractWindow;\n    rng=-1\n) where {T}\n\nSample from the dominating birth-death process backwards in time according to steps. The marks M and the points R which were added (uniform mark) / deleted (mark=0) along the run are recorded (pushfirst!). The final state of the dominating process is updated to D.\n\nSee also\n\nSBDevolve() Wilfrid Stephen Kendall , Jesper Møller  (1999)\n\n\n\n\n\n","category":"method"},{"location":"sampling/#PartialRejectionSampling.forward_coupling-Union{Tuple{T}, Tuple{Set{T},Array{Float64,1},Array{T,1},AbstractSpatialPointProcess{T},Real}} where T","page":"Sampling methods","title":"PartialRejectionSampling.forward_coupling","text":"forward_coupling(\n    D::Set{T},           # Dominating process\n    M::Vector{Float64},  # Marking process\n    R::Vector{T},        # Recording process\n    pp::AbstractSpatialPointProcess{T},\n    β::Real              # Upper bound on papangelou conditional intensity\n) where {T}\n\nCheck if coalescence occured between the lower and upper bounding processes and return the state of the lower bounding process at time 0.\n\nSee also\n\nSBDadd() Wilfrid Stephen Kendall , Jesper Møller  (1999)\n\n\n\n\n\n","category":"method"},{"location":"sampling/#PartialRejectionSampling.generate_sample_dcftp-Union{Tuple{AbstractSpatialPointProcess{T}}, Tuple{T}} where T","page":"Sampling methods","title":"PartialRejectionSampling.generate_sample_dcftp","text":"generate_sample_dcftp(\n    pp::AbstractSpatialPointProcess{T};\n    win::Union{Nothing,AbstractWindow}=nothing,\n    n₀::Int=1,\n    rng=-1\n)::Vector{T} where {T}\n\nGenerate an exact sample from a spatial point process pp on window win using dominated coupling from the past.\n\nDefault window (win=nothing) is window(pp)=pp.window\nInitial coalescence check performed after n₀ steps.\nSeed or random number generator is passed via rng.\n\nSee also\n\nWilfrid Stephen Kendall , Jesper Møller  (1999), Wilfrid Stephen Kendall , Jesper Møller  (2000)\nSection 11.2.6 Jesper. Møller , Rasmus Plenge. Waagepetersen  (2004)\n\n\n\n\n\n","category":"method"},{"location":"sampling/#PartialRejectionSampling.isattractive-Tuple{AbstractSpatialPointProcess}","page":"Sampling methods","title":"PartialRejectionSampling.isattractive","text":"isattractive(pp::AbstractSpatialPointProcess)\n\nProperty of a PRS.AbstractSpatialPointProcess.\n\n\n\n\n\n","category":"method"},{"location":"sampling/#PartialRejectionSampling.isrepulsive-Tuple{AbstractSpatialPointProcess}","page":"Sampling methods","title":"PartialRejectionSampling.isrepulsive","text":"isrepulsive(pp::AbstractSpatialPointProcess)\n\nProperty of a PRS.AbstractSpatialPointProcess.\n\n\n\n\n\n","category":"method"},{"location":"sampling/#PartialRejectionSampling.papangelou_conditional_intensity-Tuple{AbstractSpatialPointProcess,Any,Any}","page":"Sampling methods","title":"PartialRejectionSampling.papangelou_conditional_intensity","text":"papangelou_conditional_intensity(pp::AbstractSpatialPointProcess, x, X)\n\nCompute the Papangelou conditional intensity of pp, as the ratio of densities fracf(X cup x)f(X).\n\nSee also\n\nSection 6.1.1 Jesper. Møller , Rasmus Plenge. Waagepetersen  (2004)\n\n\n\n\n\n","category":"method"},{"location":"sampling/#PartialRejectionSampling.upper_bound_papangelou_conditional_intensity-Tuple{AbstractSpatialPointProcess}","page":"Sampling methods","title":"PartialRejectionSampling.upper_bound_papangelou_conditional_intensity","text":"upper_bound_papangelou_conditional_intensity(pp::AbstractSpatialPointProcess)\n\nCompute an upper bound on the PRS.papangelou_conditional_intensity of pp\n\nSee also\n\nEquation 2.1 Wilfrid Stephen Kendall , Jesper Møller  (1999)\n\n\n\n\n\n","category":"method"},{"location":"#[PartialRejectionSampling.jl](https://github.com/guilgautier/PartialRejectionSampling.jl)-documentation","page":"Home","title":"PartialRejectionSampling.jl documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This module provides a Julia implementation of the Partial Rejection Sampling (PRS) methodology developed by Heng Guo , Mark Jerrum , Jingcheng Liu  (2019). With PRS, you generate exact samples from product distributions subject to some constraints, see e.g., some Graph point processes and Spatial point processes.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Given an initial sample from the (unconstrained) product distribution:","category":"page"},{"location":"","page":"Home","title":"Home","text":"vanilla rejection sampling resample all variables if any constraint is violated; until all constraints are satisfied,\nPatial rejection sampling instead constructs a subset of variables to be resampled, starting from variables involved in violated constraints, and preserves the state of the variables outside of this resampling set; until all constraints are satisfied.","category":"page"},{"location":"","page":"Home","title":"Home","text":"In both cases, the output sample is guaranteed to have the right distribution, i.e., the product distribution subject to the prescribed constraints.","category":"page"},{"location":"#Getting-Started","page":"Home","title":"Getting Started","text":"","category":"section"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"PartialRejectionSampling.jl is not yet a registered package. But you can to install it through","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> ]add https://github.com/guilgautier/PartialRejectionSampling.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"see also how to manage packages with Pkg.","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To start using the package, simply enter","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using PartialRejectionSampling\n# const PRS = PartialRejectionSampling is made available so you can then use\n# PRS.<type/function_you_want_to_use>","category":"page"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"#Types","page":"Home","title":"Types","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Order   = [:type]","category":"page"},{"location":"#Functions","page":"Home","title":"Functions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Order   = [:function]","category":"page"}]
}
